Kubejoin command on worker output:

kworker1.example.com
-bash-4.2# hostnamectl set-hostname Kworker.example.com
-bash-4.2# vim /etc/hosts
-bash-4.2# rm -rf /etc/kubernetes/
-bash-4.2# systemctl stop kubelet
-bash-4.2# rm -rf /var/lib/kubelet/
-bash-4.2# kubeadm join 192.168.0.122:6443 --token mquqcx.k9oax1uam6v1i7yc --discovery-token-ca-cert-hash sha256:ea6bd111f1e9ce3481179aafe2ba518d26e28b95ca7840c7f7e3cb463224efdc --v=5
W0703 13:50:17.381810    1877 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
I0703 13:50:17.381953    1877 join.go:371] [preflight] found NodeName empty; using OS hostname as NodeName
I0703 13:50:17.382055    1877 initconfiguration.go:103] detected and using CRI socket: /var/run/dockershim.sock
[preflight] Running pre-flight checks
I0703 13:50:17.382192    1877 preflight.go:90] [preflight] Running general checks
I0703 13:50:17.382274    1877 checks.go:249] validating the existence and emptiness of directory /etc/kubernetes/manifests
I0703 13:50:17.382301    1877 checks.go:286] validating the existence of file /etc/kubernetes/kubelet.conf
I0703 13:50:17.382321    1877 checks.go:286] validating the existence of file /etc/kubernetes/bootstrap-kubelet.conf
I0703 13:50:17.382339    1877 checks.go:102] validating the container runtime
I0703 13:50:18.166280    1877 checks.go:128] validating if the service is enabled and active
        [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
I0703 13:50:18.918263    1877 checks.go:335] validating the contents of file /proc/sys/net/bridge/bridge-nf-call-iptables
I0703 13:50:18.918347    1877 checks.go:335] validating the contents of file /proc/sys/net/ipv4/ip_forward
I0703 13:50:18.918394    1877 checks.go:649] validating whether swap is enabled or not
I0703 13:50:18.918445    1877 checks.go:376] validating the presence of executable conntrack
I0703 13:50:18.918484    1877 checks.go:376] validating the presence of executable ip
I0703 13:50:18.918512    1877 checks.go:376] validating the presence of executable iptables
I0703 13:50:18.918539    1877 checks.go:376] validating the presence of executable mount
I0703 13:50:18.918612    1877 checks.go:376] validating the presence of executable nsenter
I0703 13:50:18.918641    1877 checks.go:376] validating the presence of executable ebtables
I0703 13:50:18.918664    1877 checks.go:376] validating the presence of executable ethtool
I0703 13:50:18.918685    1877 checks.go:376] validating the presence of executable socat
I0703 13:50:18.918708    1877 checks.go:376] validating the presence of executable tc
I0703 13:50:18.918729    1877 checks.go:376] validating the presence of executable touch
I0703 13:50:18.918763    1877 checks.go:520] running all checks
I0703 13:50:19.511635    1877 checks.go:406] checking whether the given node name is reachable using net.LookupHost
I0703 13:50:19.512088    1877 checks.go:618] validating kubelet version
I0703 13:50:20.065936    1877 checks.go:128] validating if the service is enabled and active
I0703 13:50:20.132285    1877 checks.go:201] validating availability of port 10250
I0703 13:50:20.132794    1877 checks.go:286] validating the existence of file /etc/kubernetes/pki/ca.crt
I0703 13:50:20.132836    1877 checks.go:432] validating if the connectivity type is via proxy or direct
I0703 13:50:20.132942    1877 join.go:441] [preflight] Discovering cluster-info
I0703 13:50:20.133034    1877 token.go:78] [discovery] Created cluster-info discovery client, requesting info from "192.168.0.122:6443"
I0703 13:50:20.247553    1877 token.go:116] [discovery] Requesting info from "192.168.0.122:6443" again to validate TLS against the pinned public key
I0703 13:50:20.330268    1877 token.go:133] [discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "192.168.0.122:6443"
I0703 13:50:20.330329    1877 discovery.go:51] [discovery] Using provided TLSBootstrapToken as authentication credentials for the join process
I0703 13:50:20.330350    1877 join.go:455] [preflight] Fetching init configuration
I0703 13:50:20.330361    1877 join.go:493] [preflight] Retrieving KubeConfig objects
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
I0703 13:50:20.441112    1877 interface.go:400] Looking for default routes with IPv4 addresses
I0703 13:50:20.441143    1877 interface.go:405] Default route transits interface "enp0s3"
I0703 13:50:20.442207    1877 interface.go:208] Interface enp0s3 is up
I0703 13:50:20.442327    1877 interface.go:256] Interface "enp0s3" has 2 addresses :[10.0.2.15/24 fe80::76db:897c:857b:56b1/64].
I0703 13:50:20.442367    1877 interface.go:223] Checking addr  10.0.2.15/24.
I0703 13:50:20.442385    1877 interface.go:230] IP found 10.0.2.15
I0703 13:50:20.442416    1877 interface.go:262] Found valid IPv4 address 10.0.2.15 for interface "enp0s3".
I0703 13:50:20.442431    1877 interface.go:411] Found active IP 10.0.2.15
I0703 13:50:20.442501    1877 preflight.go:101] [preflight] Running configuration dependant checks
I0703 13:50:20.442527    1877 controlplaneprepare.go:211] [download-certs] Skipping certs download
I0703 13:50:20.442549    1877 kubelet.go:111] [kubelet-start] writing bootstrap kubelet config file at /etc/kubernetes/bootstrap-kubelet.conf
I0703 13:50:20.493220    1877 kubelet.go:119] [kubelet-start] writing CA certificate at /etc/kubernetes/pki/ca.crt
I0703 13:50:20.495332    1877 kubelet.go:145] [kubelet-start] Checking for an existing Node in the cluster with name "kworker.example.com" and status "Ready"
I0703 13:50:20.525784    1877 kubelet.go:159] [kubelet-start] Stopping the kubelet
[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.18" ConfigMap in the kube-system namespace
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
I0703 13:50:32.288870    1877 cert_rotation.go:137] Starting client certificate rotation controller
I0703 13:50:32.295544    1877 kubelet.go:194] [kubelet-start] preserving the crisocket information for the node
I0703 13:50:32.295581    1877 patchnode.go:30] [patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "kworker.example.com" as an annotation
^C
-bash-4.2# rm -rf /var/lib/kubelet/
-bash-4.2# rm -rf /etc/kubernetes/
-bash-4.2# systemctl stop kubelet
-bash-4.2# kubeadm join 192.168.0.122:6443 --token mquqcx.k9oax1uam6v1i7yc --discovery-token-ca-cert-hash sha256:ea6bd111f1e9ce3481179aafe2ba518d26e28b95ca7840c7f7e3cb463224efdc --v=5
W0703 13:51:15.910530    2348 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.
I0703 13:51:15.910695    2348 join.go:371] [preflight] found NodeName empty; using OS hostname as NodeName
I0703 13:51:15.910774    2348 initconfiguration.go:103] detected and using CRI socket: /var/run/dockershim.sock
[preflight] Running pre-flight checks
I0703 13:51:15.910941    2348 preflight.go:90] [preflight] Running general checks
I0703 13:51:15.911129    2348 checks.go:249] validating the existence and emptiness of directory /etc/kubernetes/manifests
I0703 13:51:15.911162    2348 checks.go:286] validating the existence of file /etc/kubernetes/kubelet.conf
I0703 13:51:15.911179    2348 checks.go:286] validating the existence of file /etc/kubernetes/bootstrap-kubelet.conf
I0703 13:51:15.911202    2348 checks.go:102] validating the container runtime
I0703 13:51:16.344889    2348 checks.go:128] validating if the service is enabled and active
        [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
I0703 13:51:17.078620    2348 checks.go:335] validating the contents of file /proc/sys/net/bridge/bridge-nf-call-iptables
I0703 13:51:17.078694    2348 checks.go:335] validating the contents of file /proc/sys/net/ipv4/ip_forward
I0703 13:51:17.078735    2348 checks.go:649] validating whether swap is enabled or not
I0703 13:51:17.078783    2348 checks.go:376] validating the presence of executable conntrack
I0703 13:51:17.078821    2348 checks.go:376] validating the presence of executable ip
I0703 13:51:17.078842    2348 checks.go:376] validating the presence of executable iptables
I0703 13:51:17.078907    2348 checks.go:376] validating the presence of executable mount
I0703 13:51:17.078934    2348 checks.go:376] validating the presence of executable nsenter
I0703 13:51:17.078955    2348 checks.go:376] validating the presence of executable ebtables
I0703 13:51:17.078975    2348 checks.go:376] validating the presence of executable ethtool
I0703 13:51:17.078993    2348 checks.go:376] validating the presence of executable socat
I0703 13:51:17.079014    2348 checks.go:376] validating the presence of executable tc
I0703 13:51:17.079033    2348 checks.go:376] validating the presence of executable touch
I0703 13:51:17.079067    2348 checks.go:520] running all checks
I0703 13:51:17.692241    2348 checks.go:406] checking whether the given node name is reachable using net.LookupHost
I0703 13:51:17.693926    2348 checks.go:618] validating kubelet version
I0703 13:51:18.048947    2348 checks.go:128] validating if the service is enabled and active
I0703 13:51:18.102824    2348 checks.go:201] validating availability of port 10250
I0703 13:51:18.103082    2348 checks.go:286] validating the existence of file /etc/kubernetes/pki/ca.crt
I0703 13:51:18.103106    2348 checks.go:432] validating if the connectivity type is via proxy or direct
I0703 13:51:18.103168    2348 join.go:441] [preflight] Discovering cluster-info
I0703 13:51:18.104133    2348 token.go:78] [discovery] Created cluster-info discovery client, requesting info from "192.168.0.122:6443"
I0703 13:51:18.191946    2348 token.go:116] [discovery] Requesting info from "192.168.0.122:6443" again to validate TLS against the pinned public key
I0703 13:51:18.272929    2348 token.go:133] [discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server "192.168.0.122:6443"
I0703 13:51:18.272981    2348 discovery.go:51] [discovery] Using provided TLSBootstrapToken as authentication credentials for the join process
I0703 13:51:18.273000    2348 join.go:455] [preflight] Fetching init configuration
I0703 13:51:18.273010    2348 join.go:493] [preflight] Retrieving KubeConfig objects
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
I0703 13:51:18.360991    2348 interface.go:400] Looking for default routes with IPv4 addresses
I0703 13:51:18.371378    2348 interface.go:405] Default route transits interface "enp0s3"
I0703 13:51:18.371953    2348 interface.go:208] Interface enp0s3 is up
I0703 13:51:18.372120    2348 interface.go:256] Interface "enp0s3" has 2 addresses :[10.0.2.15/24 fe80::76db:897c:857b:56b1/64].
I0703 13:51:18.372185    2348 interface.go:223] Checking addr  10.0.2.15/24.
I0703 13:51:18.372218    2348 interface.go:230] IP found 10.0.2.15
I0703 13:51:18.372253    2348 interface.go:262] Found valid IPv4 address 10.0.2.15 for interface "enp0s3".
I0703 13:51:18.372279    2348 interface.go:411] Found active IP 10.0.2.15
I0703 13:51:18.372374    2348 preflight.go:101] [preflight] Running configuration dependant checks
I0703 13:51:18.372423    2348 controlplaneprepare.go:211] [download-certs] Skipping certs download
I0703 13:51:18.372462    2348 kubelet.go:111] [kubelet-start] writing bootstrap kubelet config file at /etc/kubernetes/bootstrap-kubelet.conf
I0703 13:51:18.375290    2348 kubelet.go:119] [kubelet-start] writing CA certificate at /etc/kubernetes/pki/ca.crt
I0703 13:51:18.377482    2348 kubelet.go:145] [kubelet-start] Checking for an existing Node in the cluster with name "kworker.example.com" and status "Ready"
I0703 13:51:18.417361    2348 kubelet.go:159] [kubelet-start] Stopping the kubelet
[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.18" ConfigMap in the kube-system namespace
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
I0703 13:51:25.012486    2348 cert_rotation.go:137] Starting client certificate rotation controller
I0703 13:51:25.040072    2348 kubelet.go:194] [kubelet-start] preserving the crisocket information for the node
I0703 13:51:25.040140    2348 patchnode.go:30] [patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "kworker.example.com" as an annotation

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

where 10.0.2.15 is a local woorkernode interface IP.
